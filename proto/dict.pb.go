// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/dict.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	libresp "github.com/pku-hit/libresp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DictType int32

const (
	DictType_OmitType DictType = 0
	DictType_Root     DictType = 1
	DictType_Group    DictType = 2
	DictType_Node     DictType = 3
)

var DictType_name = map[int32]string{
	0: "OmitType",
	1: "Root",
	2: "Group",
	3: "Node",
}

var DictType_value = map[string]int32{
	"OmitType": 0,
	"Root":     1,
	"Group":    2,
	"Node":     3,
}

func (x DictType) String() string {
	return proto.EnumName(DictType_name, int32(x))
}

func (DictType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22c1e80adc3f1fcd, []int{0}
}

type DictStatus int32

const (
	DictStatus_OmitStatus DictStatus = 0
	DictStatus_Normal     DictStatus = 1
	DictStatus_Deleted    DictStatus = 2
)

var DictStatus_name = map[int32]string{
	0: "OmitStatus",
	1: "Normal",
	2: "Deleted",
}

var DictStatus_value = map[string]int32{
	"OmitStatus": 0,
	"Normal":     1,
	"Deleted":    2,
}

func (x DictStatus) String() string {
	return proto.EnumName(DictStatus_name, int32(x))
}

func (DictStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22c1e80adc3f1fcd, []int{1}
}

type DictItem struct {
	DictUniqueId         string     `protobuf:"bytes,1,opt,name=dictUniqueId,proto3" json:"dictUniqueId,omitempty"`
	Code                 string     `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name                 string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type                 DictType   `protobuf:"varint,4,opt,name=type,proto3,enum=proto.DictType" json:"type,omitempty"`
	Status               DictStatus `protobuf:"varint,5,opt,name=status,proto3,enum=proto.DictStatus" json:"status,omitempty"`
	Value                string     `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DictItem) Reset()         { *m = DictItem{} }
func (m *DictItem) String() string { return proto.CompactTextString(m) }
func (*DictItem) ProtoMessage()    {}
func (*DictItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_22c1e80adc3f1fcd, []int{0}
}

func (m *DictItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DictItem.Unmarshal(m, b)
}
func (m *DictItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DictItem.Marshal(b, m, deterministic)
}
func (m *DictItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DictItem.Merge(m, src)
}
func (m *DictItem) XXX_Size() int {
	return xxx_messageInfo_DictItem.Size(m)
}
func (m *DictItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DictItem.DiscardUnknown(m)
}

var xxx_messageInfo_DictItem proto.InternalMessageInfo

func (m *DictItem) GetDictUniqueId() string {
	if m != nil {
		return m.DictUniqueId
	}
	return ""
}

func (m *DictItem) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *DictItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DictItem) GetType() DictType {
	if m != nil {
		return m.Type
	}
	return DictType_OmitType
}

func (m *DictItem) GetStatus() DictStatus {
	if m != nil {
		return m.Status
	}
	return DictStatus_OmitStatus
}

func (m *DictItem) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ListChildrenRequest struct {
	Type                 DictType `protobuf:"varint,1,opt,name=type,proto3,enum=proto.DictType" json:"type,omitempty"`
	ParentId             string   `protobuf:"bytes,2,opt,name=parentId,proto3" json:"parentId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListChildrenRequest) Reset()         { *m = ListChildrenRequest{} }
func (m *ListChildrenRequest) String() string { return proto.CompactTextString(m) }
func (*ListChildrenRequest) ProtoMessage()    {}
func (*ListChildrenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22c1e80adc3f1fcd, []int{1}
}

func (m *ListChildrenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListChildrenRequest.Unmarshal(m, b)
}
func (m *ListChildrenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListChildrenRequest.Marshal(b, m, deterministic)
}
func (m *ListChildrenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListChildrenRequest.Merge(m, src)
}
func (m *ListChildrenRequest) XXX_Size() int {
	return xxx_messageInfo_ListChildrenRequest.Size(m)
}
func (m *ListChildrenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListChildrenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListChildrenRequest proto.InternalMessageInfo

func (m *ListChildrenRequest) GetType() DictType {
	if m != nil {
		return m.Type
	}
	return DictType_OmitType
}

func (m *ListChildrenRequest) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

type AddDictRequest struct {
	ParentId             string         `protobuf:"bytes,1,opt,name=parentId,proto3" json:"parentId,omitempty"`
	Type                 DictType       `protobuf:"varint,2,opt,name=type,proto3,enum=proto.DictType" json:"type,omitempty"`
	Code                 string         `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Name                 string         `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Value                *_struct.Value `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AddDictRequest) Reset()         { *m = AddDictRequest{} }
func (m *AddDictRequest) String() string { return proto.CompactTextString(m) }
func (*AddDictRequest) ProtoMessage()    {}
func (*AddDictRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22c1e80adc3f1fcd, []int{2}
}

func (m *AddDictRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddDictRequest.Unmarshal(m, b)
}
func (m *AddDictRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddDictRequest.Marshal(b, m, deterministic)
}
func (m *AddDictRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDictRequest.Merge(m, src)
}
func (m *AddDictRequest) XXX_Size() int {
	return xxx_messageInfo_AddDictRequest.Size(m)
}
func (m *AddDictRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDictRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddDictRequest proto.InternalMessageInfo

func (m *AddDictRequest) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *AddDictRequest) GetType() DictType {
	if m != nil {
		return m.Type
	}
	return DictType_OmitType
}

func (m *AddDictRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *AddDictRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddDictRequest) GetValue() *_struct.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.DictType", DictType_name, DictType_value)
	proto.RegisterEnum("proto.DictStatus", DictStatus_name, DictStatus_value)
	proto.RegisterType((*DictItem)(nil), "proto.DictItem")
	proto.RegisterType((*ListChildrenRequest)(nil), "proto.ListChildrenRequest")
	proto.RegisterType((*AddDictRequest)(nil), "proto.AddDictRequest")
}

func init() { proto.RegisterFile("proto/dict.proto", fileDescriptor_22c1e80adc3f1fcd) }

var fileDescriptor_22c1e80adc3f1fcd = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0x13, 0x27, 0x75, 0xa7, 0x51, 0x70, 0x17, 0x8a, 0x2c, 0x53, 0xa1, 0x2a, 0x5c, 0x4a,
	0x45, 0x6c, 0x29, 0xa8, 0xe2, 0x00, 0x17, 0xd4, 0x54, 0x51, 0x24, 0x54, 0xa4, 0x14, 0x7a, 0x77,
	0xe2, 0xc1, 0x59, 0x61, 0x7b, 0xb7, 0xeb, 0x35, 0x28, 0xbf, 0xc0, 0x8f, 0xf0, 0x13, 0x7c, 0x1c,
	0xda, 0xf5, 0xc6, 0x4d, 0xda, 0x34, 0x3d, 0x79, 0x76, 0xde, 0xbc, 0x79, 0xe3, 0x37, 0x03, 0x2e,
	0x17, 0x4c, 0xb2, 0x30, 0xa6, 0x73, 0x19, 0xe8, 0x90, 0xb4, 0xf5, 0xc7, 0x1f, 0x24, 0x54, 0x2e,
	0xca, 0x59, 0x30, 0x67, 0x59, 0xc8, 0x7f, 0x96, 0x83, 0x05, 0x95, 0x61, 0x4a, 0x67, 0x02, 0x0b,
	0x1e, 0x66, 0x45, 0x32, 0x50, 0x01, 0xcb, 0x0b, 0xac, 0x58, 0xfe, 0xab, 0x84, 0xb1, 0x24, 0xc5,
	0x50, 0xbf, 0x66, 0xe5, 0x8f, 0x10, 0x33, 0x2e, 0x97, 0x06, 0x7c, 0x7d, 0x1f, 0xfc, 0x2d, 0x22,
	0xce, 0x51, 0x14, 0x06, 0x3f, 0xbe, 0x8f, 0x17, 0x52, 0x94, 0xab, 0x81, 0xfa, 0xff, 0x2c, 0x70,
	0x46, 0x74, 0x2e, 0x27, 0x12, 0x33, 0xd2, 0x87, 0xae, 0x9a, 0xf5, 0x7b, 0x4e, 0x6f, 0x4b, 0x9c,
	0xc4, 0x9e, 0x75, 0x62, 0x9d, 0xee, 0x4f, 0x37, 0x72, 0x84, 0x80, 0x3d, 0x67, 0x31, 0x7a, 0x4d,
	0x8d, 0xe9, 0x58, 0xe5, 0xf2, 0x28, 0x43, 0xaf, 0x55, 0xe5, 0x54, 0x4c, 0xde, 0x80, 0x2d, 0x97,
	0x1c, 0x3d, 0xfb, 0xc4, 0x3a, 0xed, 0x0d, 0x9f, 0x55, 0x72, 0x81, 0x92, 0xfa, 0xb6, 0xe4, 0x38,
	0xd5, 0x20, 0x79, 0x0b, 0x9d, 0x42, 0x46, 0xb2, 0x2c, 0xbc, 0xb6, 0x2e, 0x3b, 0x5c, 0x2b, 0xbb,
	0xd6, 0xc0, 0xd4, 0x14, 0x90, 0x17, 0xd0, 0xfe, 0x15, 0xa5, 0x25, 0x7a, 0x1d, 0x2d, 0x52, 0x3d,
	0xfa, 0x37, 0xf0, 0xfc, 0x0b, 0x2d, 0xe4, 0xc5, 0x82, 0xa6, 0xb1, 0xc0, 0x7c, 0x8a, 0xb7, 0x25,
	0x16, 0xb2, 0x16, 0xb7, 0x76, 0x89, 0xfb, 0xe0, 0xf0, 0x48, 0x60, 0x2e, 0x27, 0xb1, 0xf9, 0x9b,
	0xfa, 0xdd, 0xff, 0x6b, 0x41, 0xef, 0x73, 0x1c, 0x2b, 0xc6, 0xaa, 0xe7, 0x7a, 0xb9, 0xb5, 0x59,
	0x5e, 0xeb, 0x35, 0x77, 0xe9, 0xad, 0x9c, 0x6b, 0x6d, 0x71, 0xce, 0x5e, 0x73, 0xee, 0xdd, 0xea,
	0x4f, 0x95, 0x27, 0x07, 0xc3, 0x97, 0x41, 0xb5, 0xc0, 0x60, 0xb5, 0xc0, 0xe0, 0x46, 0xa1, 0xc6,
	0x81, 0xb3, 0x0f, 0xd5, 0xfe, 0x94, 0x0e, 0xe9, 0x82, 0xf3, 0x35, 0xa3, 0x3a, 0x76, 0x1b, 0xc4,
	0x01, 0x7b, 0xca, 0x98, 0x74, 0x2d, 0xb2, 0x0f, 0xed, 0xb1, 0x60, 0x25, 0x77, 0x9b, 0x2a, 0x79,
	0xc5, 0x62, 0x74, 0x5b, 0x67, 0xe7, 0x00, 0x77, 0x36, 0x93, 0x1e, 0x80, 0xa2, 0x56, 0x2f, 0xb7,
	0x41, 0x00, 0x3a, 0x57, 0x4c, 0x64, 0x51, 0xea, 0x5a, 0xe4, 0x00, 0xf6, 0x46, 0x98, 0xa2, 0xc4,
	0xd8, 0x6d, 0x0e, 0xff, 0xb4, 0xc0, 0x56, 0x3c, 0xf2, 0x11, 0x1c, 0x65, 0xbd, 0x92, 0x20, 0x0f,
	0x67, 0xbc, 0x54, 0x17, 0xea, 0x1f, 0x05, 0xe6, 0xaa, 0x03, 0x5d, 0x6a, 0xae, 0xba, 0xdf, 0x20,
	0x97, 0xd0, 0xd5, 0x7b, 0x8b, 0x24, 0x26, 0x4c, 0x2c, 0xc9, 0xf1, 0x83, 0x06, 0xd7, 0x52, 0xd0,
	0x3c, 0xd1, 0xbf, 0xfa, 0x78, 0x9b, 0x0b, 0xd3, 0xc6, 0xac, 0x9f, 0xf8, 0xc6, 0xf9, 0x2d, 0x37,
	0xf1, 0x78, 0x93, 0x73, 0xd8, 0x33, 0xab, 0x26, 0x47, 0x86, 0xbf, 0xb9, 0x7a, 0xff, 0xb0, 0xa6,
	0xae, 0xd1, 0x3e, 0x69, 0x57, 0x34, 0x6d, 0xf7, 0xf4, 0x5b, 0xd9, 0x23, 0x70, 0xc6, 0x28, 0x75,
	0xc1, 0x13, 0x74, 0xaf, 0xa6, 0x8f, 0x31, 0x47, 0x41, 0xe7, 0x77, 0x5d, 0x66, 0x1d, 0xcd, 0x78,
	0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x65, 0xc0, 0xee, 0x69, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DictClient is the client API for Dict service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DictClient interface {
	// 获取全部Root节点列表
	ListRoot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*libresp.ListResponse, error)
	// 获取某一分类下的Root节点列表
	ListCategory(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*libresp.ListResponse, error)
	// 获取某一节点组下的子节点列表
	ListChildren(ctx context.Context, in *ListChildrenRequest, opts ...grpc.CallOption) (*libresp.ListResponse, error)
	// 添加字典
	AddDict(ctx context.Context, in *AddDictRequest, opts ...grpc.CallOption) (*libresp.Response, error)
	// 删除字典项
	DelDict(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*libresp.Response, error)
	// 通过字典ID获取指定节点的值
	GetValue(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*libresp.GenericResponse, error)
}

type dictClient struct {
	cc *grpc.ClientConn
}

func NewDictClient(cc *grpc.ClientConn) DictClient {
	return &dictClient{cc}
}

func (c *dictClient) ListRoot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*libresp.ListResponse, error) {
	out := new(libresp.ListResponse)
	err := c.cc.Invoke(ctx, "/proto.Dict/ListRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictClient) ListCategory(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*libresp.ListResponse, error) {
	out := new(libresp.ListResponse)
	err := c.cc.Invoke(ctx, "/proto.Dict/ListCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictClient) ListChildren(ctx context.Context, in *ListChildrenRequest, opts ...grpc.CallOption) (*libresp.ListResponse, error) {
	out := new(libresp.ListResponse)
	err := c.cc.Invoke(ctx, "/proto.Dict/ListChildren", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictClient) AddDict(ctx context.Context, in *AddDictRequest, opts ...grpc.CallOption) (*libresp.Response, error) {
	out := new(libresp.Response)
	err := c.cc.Invoke(ctx, "/proto.Dict/AddDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictClient) DelDict(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*libresp.Response, error) {
	out := new(libresp.Response)
	err := c.cc.Invoke(ctx, "/proto.Dict/DelDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictClient) GetValue(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*libresp.GenericResponse, error) {
	out := new(libresp.GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.Dict/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictServer is the server API for Dict service.
type DictServer interface {
	// 获取全部Root节点列表
	ListRoot(context.Context, *empty.Empty) (*libresp.ListResponse, error)
	// 获取某一分类下的Root节点列表
	ListCategory(context.Context, *wrappers.StringValue) (*libresp.ListResponse, error)
	// 获取某一节点组下的子节点列表
	ListChildren(context.Context, *ListChildrenRequest) (*libresp.ListResponse, error)
	// 添加字典
	AddDict(context.Context, *AddDictRequest) (*libresp.Response, error)
	// 删除字典项
	DelDict(context.Context, *wrappers.StringValue) (*libresp.Response, error)
	// 通过字典ID获取指定节点的值
	GetValue(context.Context, *wrappers.StringValue) (*libresp.GenericResponse, error)
}

// UnimplementedDictServer can be embedded to have forward compatible implementations.
type UnimplementedDictServer struct {
}

func (*UnimplementedDictServer) ListRoot(ctx context.Context, req *empty.Empty) (*libresp.ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoot not implemented")
}
func (*UnimplementedDictServer) ListCategory(ctx context.Context, req *wrappers.StringValue) (*libresp.ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategory not implemented")
}
func (*UnimplementedDictServer) ListChildren(ctx context.Context, req *ListChildrenRequest) (*libresp.ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChildren not implemented")
}
func (*UnimplementedDictServer) AddDict(ctx context.Context, req *AddDictRequest) (*libresp.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDict not implemented")
}
func (*UnimplementedDictServer) DelDict(ctx context.Context, req *wrappers.StringValue) (*libresp.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDict not implemented")
}
func (*UnimplementedDictServer) GetValue(ctx context.Context, req *wrappers.StringValue) (*libresp.GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}

func RegisterDictServer(s *grpc.Server, srv DictServer) {
	s.RegisterService(&_Dict_serviceDesc, srv)
}

func _Dict_ListRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).ListRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dict/ListRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).ListRoot(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dict_ListCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).ListCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dict/ListCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).ListCategory(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dict_ListChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChildrenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).ListChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dict/ListChildren",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).ListChildren(ctx, req.(*ListChildrenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dict_AddDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).AddDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dict/AddDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).AddDict(ctx, req.(*AddDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dict_DelDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).DelDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dict/DelDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).DelDict(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dict_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dict/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).GetValue(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dict_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Dict",
	HandlerType: (*DictServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRoot",
			Handler:    _Dict_ListRoot_Handler,
		},
		{
			MethodName: "ListCategory",
			Handler:    _Dict_ListCategory_Handler,
		},
		{
			MethodName: "ListChildren",
			Handler:    _Dict_ListChildren_Handler,
		},
		{
			MethodName: "AddDict",
			Handler:    _Dict_AddDict_Handler,
		},
		{
			MethodName: "DelDict",
			Handler:    _Dict_DelDict_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _Dict_GetValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dict.proto",
}
